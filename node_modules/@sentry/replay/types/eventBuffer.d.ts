import type { EventBuffer, RecordingEvent } from './types';
interface CreateEventBufferParams {
    useCompression: boolean;
}
export declare function createEventBuffer({ useCompression }: CreateEventBufferParams): EventBuffer;
export declare class EventBufferCompressionWorker implements EventBuffer {
    private _worker;
    private _eventBufferItemLength;
    private _id;
    constructor(worker: Worker);
    destroy(): void;
    /**
     * Note that this may not reflect what is actually in the event buffer. This
     * is only a local count of the buffer size since `addEvent` is async.
     */
    get length(): number;
    addEvent(event: RecordingEvent, isCheckout?: boolean): Promise<string | Uint8Array>;
    finish(): Promise<Uint8Array>;
    /**
     * Post message to worker and wait for response before resolving promise.
     */
    private _postMessage;
    private _sendEventToWorker;
    private _finishRequest;
    private _getAndIncrementId;
}
export {};
//# sourceMappingURL=eventBuffer.d.ts.map